{"version":3,"sources":["components/Graph.js","components/mainComponent.js","components/header.js","components/footer.js","App.js","serviceWorker.js","index.js","components/styles.module.css"],"names":["Graph","series","name","data","options","dataLabels","enabled","stroke","curve","xaxis","type","categories","tooltip","x","format","style","backgroundColor","textAlign","color","className","height","MainComponent","useState","setData","results","setResults","searchCountries","setSearchCountries","useEffect","axios","all","get","then","responseArr","catch","err","console","log","lastUpdate","Date","parseInt","updated","toString","countries","filter","item","country","toLowerCase","map","i","Card","key","bg","text","margin","Img","variant","src","countryInfo","flag","width","Body","Title","Text","cases","deaths","recovered","todayCases","todayDeaths","active","critical","value","displayType","thousandSeparator","fontSize","CardDeck","styles","container","id","card_container_left","todayRecovered","card_container_right","affectedCountries","Form","Group","controlId","Control","placeholder","onChange","e","target","Header","href","rel","size","Footer","footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.52953feb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport ReactApexChart from \"react-apexcharts\";\r\n\r\nfunction Graph() {\r\n  const series = [\r\n    {\r\n      name: \"Cases\",\r\n      data: [\r\n        555,\r\n        12038,\r\n        69030,\r\n        88369,\r\n        167466,\r\n        932638,\r\n        2055423,\r\n        3343777,\r\n        3845718,\r\n      ],\r\n    },\r\n    {\r\n      name: \"Recovered\",\r\n      data: [28, 284, 9394, 42710, 76026, 191853, 501538, 1029651, 1255481],\r\n    },\r\n    {\r\n      name: \"Deaths\",\r\n      data: [17, 259, 1666, 2996, 6472, 49675, 140658, 238619, 269567],\r\n    },\r\n  ];\r\n  const options = {\r\n    dataLabels: {\r\n      enabled: false,\r\n    },\r\n    stroke: {\r\n      curve: \"smooth\",\r\n    },\r\n    xaxis: {\r\n      type: \"datetime\",\r\n      categories: [\r\n        \"1/22/20\",\r\n        \"2/1/20\",\r\n        \"2/15/20\",\r\n        \"3/1/20\",\r\n        \"3/15/20\",\r\n        \"4/1/20\",\r\n        \"4/15/20\",\r\n        \"5/1/20\",\r\n        \"5/7/20\",\r\n      ],\r\n    },\r\n    tooltip: {\r\n      x: {\r\n        format: \"dd/MM/yy\",\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundColor: \"white\",\r\n        textAlign: \"center\",\r\n      }}\r\n    >\r\n      <br />\r\n      <h2>C<i style={{color:\"red\"}} className=\"fas fa-virus\"></i>VID-19 Global Graphs</h2>\r\n      <br />\r\n      <ReactApexChart\r\n        options={options}\r\n        series={series}\r\n        type=\"area\"\r\n        height={350}\r\n      />\r\n      <br />\r\n      <ReactApexChart\r\n        options={options}\r\n        series={series}\r\n        type=\"bar\"\r\n        height={350}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Graph;","import React, {useEffect, useState } from 'react';\r\nimport {Card, Form} from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport styles from './styles.module.css';\r\nimport NumberFormat from 'react-number-format';\r\nimport CardDeck from 'react-bootstrap/CardDeck'\r\nimport Graph from './Graph';\r\n\r\nfunction MainComponent () {\r\n    const [data, setData]=useState([]);\r\n    const [results, setResults] = useState([]);\r\n    const [searchCountries, setSearchCountries] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        axios\r\n         .all([\r\n            axios.get(\"https://corona.lmao.ninja/v2/all\"),\r\n            axios.get(\"https://corona.lmao.ninja/v2/countries\"),\r\n          ])\r\n          .then((responseArr) => {\r\n            setData(responseArr[0].data);\r\n            setResults(responseArr[1].data);\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n          });\r\n    },[]);\r\n\r\n    const date=new Date(parseInt(data.updated));\r\n    const lastUpdate=date.toString();\r\n\r\n    const filterCountries = results.filter((item) => {\r\n        return (item.country.toLowerCase() === searchCountries.toLowerCase());\r\n      });\r\n    \r\n      const countries = filterCountries.map((data, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            bg=\"dark\"\r\n            text=\"light\"\r\n            className=\"text-center\"\r\n            style={{ margin: \"80px\" }}\r\n          >\r\n            <Card.Img variant=\"top\" src={data.countryInfo.flag} width=\"200px\" height=\"280px\" />\r\n            <Card.Body>\r\n              <Card.Title>{data.country}</Card.Title>\r\n              <Card.Text>Cases {data.cases}</Card.Text>\r\n              <Card.Text>Deaths {data.deaths}</Card.Text>\r\n              <Card.Text>Recovered {data.recovered}</Card.Text>\r\n              <Card.Text>Today's cases {data.todayCases}</Card.Text>\r\n              <Card.Text>Today's deaths {data.todayDeaths}</Card.Text>\r\n              <Card.Text>Active {data.active}</Card.Text>\r\n              <Card.Text>Critical {data.critical}</Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n        );\r\n      });\r\n    \r\n\r\n \r\n    return(\r\n            <div>\r\n                <Card  style={{ width: '18rem' },{textAlign:\"center\"}}>\r\n                    <Card.Body>\r\n                        <Card.Title>Total Coronavirus Cases:</Card.Title>\r\n                        <Card.Title  style={{color: \"#484848\"}} className=\"mb-2 \">\r\n                            {' '}\r\n                        <NumberFormat\r\n                                value={data.cases}\r\n                                displayType={\"text\"}\r\n                                thousandSeparator={true}\r\n                                style={{ fontSize: \"30px\" }}\r\n                        /> \r\n                        </Card.Title>\r\n                    </Card.Body>\r\n                    <Card.Body>\r\n                        <Card.Title>Deaths:</Card.Title>\r\n                        <Card.Title style={{color: \"red\"}} className=\"mb-2 \">\r\n                            {' '}\r\n                        <NumberFormat\r\n                                value={data.deaths}\r\n                                displayType={\"text\"}\r\n                                thousandSeparator={true}\r\n                                style={{ fontSize: \"30px\" }}\r\n                        /></Card.Title>\r\n                    </Card.Body>\r\n                    <Card.Body>\r\n                        <Card.Title>Recovered: </Card.Title>\r\n                        <Card.Title style={{color: \"#037d50\"}} className=\"mb-2 \">\r\n                            {' '}\r\n                        <NumberFormat\r\n                                value={data.recovered}\r\n                                displayType={\"text\"}\r\n                                thousandSeparator={true}\r\n                                style={{ fontSize: \"30px\" }}\r\n                        />\r\n                        </Card.Title>\r\n                        <Card.Text></Card.Text>\r\n                        <Card.Text>Last Updated:{lastUpdate}</Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n\r\n\r\n                <CardDeck className={styles.container}>\r\n                    <Card  id={styles.card_container_left} style={{ width: '18rem'},{textAlign:\"center\"}}>\r\n                        <Card.Body >\r\n                            <Card.Title>New Cases:</Card.Title>\r\n                            <Card.Title  style={{color: \"#484848\"}} className=\"mb-2 \">\r\n                                    {' '}\r\n                                  <NumberFormat\r\n                                    value={data.todayCases}\r\n                                    displayType={\"text\"}\r\n                                    thousandSeparator={true}\r\n                                    style={{ fontSize: \"30px\" }}\r\n                                />\r\n                            </Card.Title>\r\n                        </Card.Body>\r\n                        <Card.Body>\r\n                            <Card.Title>New Deaths:</Card.Title>\r\n                            <Card.Title style={{color: \"red\"}} className=\"mb-2 \">     \r\n                            {' '}\r\n                                <NumberFormat\r\n                                        value={data.todayDeaths}\r\n                                        displayType={\"text\"}\r\n                                        thousandSeparator={true}\r\n                                        style={{ fontSize: \"30px\" }}\r\n                                /></Card.Title>\r\n                        </Card.Body>\r\n                        <Card.Body>\r\n                            <Card.Title>Today Recovered: </Card.Title>\r\n                            <Card.Title style={{color: \"#037d50\"}} className=\"mb-2 \">\r\n                            {' '}\r\n                                <NumberFormat\r\n                                        value={data.todayRecovered}\r\n                                        displayType={\"text\"}\r\n                                        thousandSeparator={true}\r\n                                        style={{ fontSize: \"30px\" }}\r\n                                />\r\n                            </Card.Title>\r\n                            <Card.Text></Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                   <Card id={styles.card_container_right}  style={{ width: '18rem' },{textAlign:\"center\"}}>\r\n                        <Card.Body >\r\n                            <Card.Title>Active:</Card.Title>\r\n                            <Card.Title  style={{color: \"#484848\"}} className=\"mb-2 \">  \r\n                            {' '}\r\n                                <NumberFormat\r\n                                        value={data.active}\r\n                                        displayType={\"text\"}\r\n                                        thousandSeparator={true}\r\n                                        style={{ fontSize: \"30px\" }}\r\n                                />\r\n                                </Card.Title>\r\n                        </Card.Body>\r\n                        <Card.Body>\r\n                            <Card.Title>Critical:</Card.Title>\r\n                            <Card.Title style={{color: \"red\"}} className=\"mb-2 \">\r\n                            {' '}\r\n                                <NumberFormat\r\n                                        value={data.critical}\r\n                                        displayType={\"text\"}\r\n                                        thousandSeparator={true}\r\n                                        style={{ fontSize: \"30px\" }}\r\n                                />\r\n                                </Card.Title>\r\n                        </Card.Body>\r\n                        <Card.Body>\r\n                            <Card.Title>Affected Countries: </Card.Title>\r\n                            <Card.Title style={{color: \"#ff8c00\"}} className=\"mb-2 \">\r\n                            {' '}\r\n                                <NumberFormat\r\n                                        value={data.affectedCountries}\r\n                                        displayType={\"text\"}\r\n                                        thousandSeparator={true}\r\n                                        style={{ fontSize: \"30px\" }}\r\n                                />\r\n                                </Card.Title>\r\n                            <Card.Text></Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n\r\n                </CardDeck>\r\n                <Form>\r\n                    <Form.Group controlId=\"formGroupSearch\">\r\n                    <Form.Control\r\n                        bg=\"dark\"\r\n                        type=\"text\"\r\n                        placeholder=\"View By Country\"\r\n                        onChange={(e) => setSearchCountries(e.target.value)}\r\n                    />\r\n                    </Form.Group>\r\n                    {countries}\r\n                </Form>\r\n                <Graph />\r\n\r\n  \r\n           </div>\r\n        );\r\n    \r\n}\r\n\r\nexport default MainComponent;\r\n","import React from 'react';\r\nimport {FaReact} from 'react-icons/fa';\r\n\r\n\r\nfunction Header(){\r\n    return (\r\n        <nav className=\"navbar navbar-light bg-dark mb-5\">\r\n          <div className=\"container\">\r\n            <div className=\"navbar-header\">\r\n              <div className=\"navbar-brand text-white text-lg brand-text\" >\r\n                <h1>C<i className=\"fas fa-virus\"></i>vid-19</h1>\r\n              </div>\r\n\r\n            </div>\r\n     \r\n            <ul className=\"navbar-nav ml-auto text-light d-inline-block \">\r\n              <li className=\"nav-item d-inline-block mr-4\">\r\n                <a className=\"nav-link\" href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\"><FaReact color=\"purple\" size=\"5rem\"/></a>\r\n              </li>\r\n            </ul>\r\n           \r\n\r\n          </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n\r\n","import React from 'react';\r\nimport styles from './styles.module.css';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className={styles.footer}>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <div className=\"p-3 mt-4 text-center bg-dark text-light\">\r\n            Developed By: <span className=\"text-warning font-weight-normal\">\r\n                 Benarji Shyam\r\n            </span>\r\n            , Using <i className=\"fab fa-react\" /> React JS\r\n            integrated with external movies data API\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\n\nimport MainComponent from './components/mainComponent';\nimport Header from './components/header';\nimport Footer from './components/footer';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Header />\n        <MainComponent />\n        <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__dqoyQ\",\"card_container_left\":\"styles_card_container_left__MJlC6\",\"card_container_right\":\"styles_card_container_right__23x6-\"};"],"sourceRoot":""}